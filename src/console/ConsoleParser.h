// Generated by Bisonc++ V4.01.00 on Mon, 08 Jul 2013 23:14:45 +0200

#ifndef ConsoleParser_h_included
#define ConsoleParser_h_included

// $insert baseclass
#include "ConsoleParserbase.h"
// $insert scanner.h
#include "ConsoleLexer.h"
#include "ConsoleExtra.hpp"
#include <vector>

// $insert namespace-open
namespace tbd
{

#undef ConsoleParser
class ConsoleParser: public ConsoleParserBase
{
    // $insert scannerobject
    ConsoleLexer d_scanner;
        
    public:
        int parse();

		std::vector<ConsoleCommand> getCommandList() const;
		ConsoleParser(std::istream &in, std::ostream &out = std::cout);

    private:
        void error(char const *msg);    // called on (syntax) errors
        int lex();                      // returns the next token from the
                                        // lexical scanner. 
        void print();                   // use, e.g., d_token, d_loc

    // support functions for parse():
        void executeAction(int ruleNr);
        void errorRecovery();
        int lookup(bool recovery);
        void nextToken();
        void print__();

		void registerType(ConsoleCommandType const&);
		void registerTarget(std::string const&, int const&);
		void registerCommand();

		std::vector<ConsoleCommand> commandList;
		ConsoleTarget currentTarget;
		ConsoleCommandType currentType;
};

// $insert namespace-close
}

#endif
